var path = require('path');
var Promise = require('bluebird');
var Glob = require('glob').Glob;
var fse = require('fs-extra');

Promise.promisifyAll(fse);

var scriptDir = __dirname;
var baseDir = path.resolve(scriptDir, '..');

var jsSrcDir = path.resolve(baseDir, 'src/');
var pySrcDir = path.resolve(baseDir, '..', 'pythreejs');

var threeSrcDir = path.resolve(baseDir, 'node_modules', 'three', 'src');

var outPath = path.resolve(scriptDir, 'three-class-config.js');

function generateClassConfig() {

    return new Promise(function(resolve, reject) {
        
        var lines = [
            "//",
            "// base version of this file auto-generated by " + path.basename(__filename),
            "// date: " + new Date(),
            "//",
            "",
            "module.exports = {",
            "    _defaults: require('./three-class-config-defaults'),",
            "",
        ];

        var glob = new Glob('**/*.js', { cwd: threeSrcDir, nodir: true, })
            .on('match', function(match) {

                var classDir = path.dirname(match);
                var className = path.basename(match, '.js');

                lines = lines.concat([
                    "    " + className.replace(/\./g, '_') + ": {",
                    "        relativePath: './" + path.join(classDir, className) + "',",
                    // "        modelName: '" + className + "Model',",
                    // "        viewName:  '" + className + "View',",
                    // "        superDepModuleName: 'base',",
                    // "        superDepModulePath: './base',",
                    // "        viewSuperClass: 'ThreeView',",
                    // "        modelSuperClass: 'ThreeModel',",
                    // "        properties: {},",
                    // "        constructorArgs: [],",
                    "    },",
                ]);

            })
            .on('end', function() {

                lines.push("};", "");

                // write result to file
                fse.outputFileAsync(outPath, lines.join('\n')).then(resolve);

            })
            .on('error', function(err) {
                reject(err);
            })
            .on('abort', function() {
                reject(new Error('Aborted'));
            });
        
    });

}

if (require.main === module) {

    Promise.resolve(true)
        .then(function() {
            return generateClassConfig();
        })
        .then(function() {
            console.log('DONE');
        });

}
