from ipywidgets import Widget, DOMWidget, widget_serialization, Color
from traitlets import Unicode, Int, CInt, Instance, This, Enum, Tuple, List, Dict, Float, CFloat, Bool, Union, Any

from {{ py_base_relative_path }}enums import *
from {{ py_base_relative_path }}traits import *

from {{ superClass.pyRelativePath }} import {{ superClass.className }}

{{#each dependencies as |dep depName|}}
from {{ dep.pyRelativePath }} import {{ dep.className }}
{{/each}}

class {{ className }}({{ superClass.className }}):
    """{{ className }}
    
    Autogenerated by {{ generatorScriptName }} 
    Date: {{ now }} 
    See {{ threejs_docs_url }} 
    """

    {{#unless constructor.hasParameters}}
    def __init__(self, {{#each constructor.args as |arg|}}{{{ arg.name }}}{{#if arg.prop.defaultJson}}={{{ arg.prop.defaultJson }}}{{/if}}, {{/each}}**kwargs):
        {{#each constructor.args as |arg|}}
        kwargs['{{{ arg.name }}}'] = {{{ arg.name }}}
        {{/each}}
        super({{ superClass.className }}, self).__init__(**kwargs)

    {{/unless}}
    _view_name = Unicode('{{ viewName }}').tag(sync=True)
    _model_name = Unicode('{{ modelName }}').tag(sync=True)

    {{#each properties as |prop propName|}}
    {{ propName }} = {{{ prop.trait_declaration }}}
    {{/each}}

